<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.github/DEVELOPMENT_JOURNAL.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/DEVELOPMENT_JOURNAL.md" />
              <option name="updatedContent" value="# 39.ts Monorepo Development Journal&#10;&#10;## July 2025&#10;&#10;### TypeScript Monorepo Refactor&#10;- Updated all package `tsconfig.json` files to extend the root `tsconfig.base.json`.&#10;- Enabled `composite`, `declaration`, and `declarationMap` for all packages to support project references and IDE type sharing.&#10;- Added `references` in each package to ensure correct dependency graph and incremental builds.&#10;- Improved IDE compatibility (IntelliJ, VSCode) for cross-package type resolution and test discovery.&#10;&#10;### Testing Strategy&#10;- Standardized on [Vitest](https://vitest.dev/) for all unit/integration tests.&#10;- Test files are colocated with source files (no `__tests__` folders).&#10;- Desktop-specific logic is only tested in the `39.ts-neutralino` package.&#10;&#10;### Architectural Boundaries&#10;- Core framework (`39.ts`) remains platform-agnostic (no browser or Neutralino-specific logic).&#10;- Desktop integration is isolated in `39.ts-neutralino`.&#10;- CLI (`39.starter`) scaffolds projects and injects platform-specific files only when needed.&#10;&#10;### Next Steps&#10;- Continue modularization and strict separation of platform concerns.&#10;- Expand test coverage and add more example apps.&#10;- Document further architectural decisions and refactors in this journal.&#10;&#10;---&#10;&#10;*This journal is updated as major changes and decisions are made. Please add entries for significant refactors, new features, or architectural shifts.*&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/packages/39.ts/components/loadingOverlay.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/packages/39.ts/components/loadingOverlay.ts" />
              <option name="originalContent" value="import {createComponent} from './component';&#10;import {Div, Span} from '../dom/html';&#10;import {createSignal} from '../core/signal';&#10;import {createDerived} from '../core/createDerived';&#10;&#10;export function loadingOverlay() {&#10;    const visible = createSignal(false);&#10;&#10;    const Overlay = createComponent&lt;{ title: string }&gt;((props,ctx) =&gt; {&#10;        const overlay = Div({ className: 'loading-overlay' }, [&#10;&#10;        ]);&#10;        ctx.onMount(() =&gt; console.log(&quot;overlay&quot;))&#10;        const visibility = createDerived(() =&gt; {&#10;            overlay.style.display = visible.get() ? 'flex' : 'none';&#10;            return overlay;&#10;        }, [visible]);&#10;&#10;        return Div([visibility]);&#10;    });&#10;&#10;    return {&#10;        Overlay,&#10;        show: () =&gt; visible.set(true),&#10;        hide: () =&gt; visible.set(false),&#10;        toggle: () =&gt; visible.set(!visible.get())&#10;    };&#10;}&#10;" />
              <option name="updatedContent" value="import {createComponent} from './component';&#10;import {Div, Span} from '../dom/html';&#10;import {createSignal} from '../core/signal';&#10;import {createDerived} from '../core/createDerived';&#10;&#10;export function loadingOverlay() {&#10;    const visible = createSignal(false);&#10;&#10;    const Overlay = createComponent&lt;{ title: string }&gt;((props,ctx) =&gt; {&#10;        const overlay = Div({ className: 'loading-overlay' }, [&#10;&#10;        ]);&#10;        ctx.onMount(() =&gt; console.log(&quot;overlay&quot;))&#10;        const visibility = createDerived(() =&gt; {&#10;            overlay.style.display = visible.get() ? 'flex' : 'none';&#10;            return overlay;&#10;        }, [visible]);&#10;&#10;        return Div({}, [visibility]);&#10;    });&#10;&#10;    return {&#10;        Overlay,&#10;        show: () =&gt; visible.set(true),&#10;        hide: () =&gt; visible.set(false),&#10;        toggle: () =&gt; visible.set(!visible.get())&#10;    };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/packages/39.ts/core/signal.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/packages/39.ts/core/signal.ts" />
              <option name="originalContent" value="import { eventBus } from './eventBus';&#10;import { Signal } from '../@types/state';&#10;&#10;/**&#10; * Optional global logger hook for every signal change.&#10; * Tests will drive this via setSignalLogger().&#10; */&#10;export let signalLogFn: ((name: string, value: unknown) =&gt; void) | null = null;&#10;&#10;/**&#10; * Install (or clear) a logger callback.&#10; */&#10;export function setSignalLogger(fn: typeof signalLogFn): void {&#10;    signalLogFn = fn;&#10;}&#10;&#10;let signalIdCounter = 0;&#10;&#10;export function createSignal&lt;T&gt;(initial: T): Signal&lt;T&gt; {&#10;    if (initial === undefined) {&#10;        throw new Error('Signal initial value cannot be undefined. Use null instead.');&#10;    }&#10;&#10;    const id = `signal:${signalIdCounter++}`;&#10;    let value = initial;&#10;&#10;    return {&#10;        get() {&#10;            return value;&#10;        },&#10;        set(newValue: T) {&#10;            if (newValue === undefined) {&#10;                throw new Error('Signal value cannot be set to undefined. Use null instead.');&#10;            }&#10;&#10;            const prev = value;&#10;&#10;            // only fire if truly changed&#10;            if (!Object.is(prev, newValue)) {&#10;                value = newValue;&#10;&#10;                console.log(&quot;newValue&quot;);&#10;                console.log(newValue);&#10;&#10;                // 1) logger&#10;                if (signalLogFn) {&#10;                    signalLogFn(id, newValue);&#10;                }&#10;                // 2) subscribers&#10;                eventBus.emit(id, newValue);&#10;            }&#10;        },&#10;        subscribe(listener) {&#10;            if (typeof listener !== 'function') {&#10;                throw new Error('Signal subscribe() requires a function listener');&#10;            }&#10;            eventBus.on(id, listener);&#10;            // return unsubscribe&#10;            return () =&gt; {&#10;                eventBus.off(id, listener);&#10;            };&#10;        }&#10;    };&#10;}&#10;" />
              <option name="updatedContent" value="import { eventBus } from './eventBus.js';&#10;import { Signal } from '../@types/state.js';&#10;&#10;/**&#10; * Optional global logger hook for every signal change.&#10; * Tests will drive this via setSignalLogger().&#10; */&#10;export let signalLogFn: ((name: string, value: unknown) =&gt; void) | null = null;&#10;&#10;/**&#10; * Install (or clear) a logger callback.&#10; */&#10;export function setSignalLogger(fn: typeof signalLogFn): void {&#10;    signalLogFn = fn;&#10;}&#10;&#10;let signalIdCounter = 0;&#10;&#10;export function createSignal&lt;T&gt;(initial: T): Signal&lt;T&gt; {&#10;    if (initial === undefined) {&#10;        throw new Error('Signal initial value cannot be undefined. Use null instead.');&#10;    }&#10;&#10;    const id = `signal:${signalIdCounter++}`;&#10;    let value = initial;&#10;&#10;    return {&#10;        get() {&#10;            return value;&#10;        },&#10;        set(newValue: T) {&#10;            if (newValue === undefined) {&#10;                throw new Error('Signal value cannot be set to undefined. Use null instead.');&#10;            }&#10;&#10;            const prev = value;&#10;&#10;            // only fire if truly changed&#10;            if (!Object.is(prev, newValue)) {&#10;                value = newValue;&#10;&#10;                console.log(&quot;newValue&quot;);&#10;                console.log(newValue);&#10;&#10;                // 1) logger&#10;                if (signalLogFn) {&#10;                    signalLogFn(id, newValue);&#10;                }&#10;                // 2) subscribers&#10;                eventBus.emit(id, newValue);&#10;            }&#10;        },&#10;        subscribe(listener) {&#10;            if (typeof listener !== 'function') {&#10;                throw new Error('Signal subscribe() requires a function listener');&#10;            }&#10;            eventBus.on(id, listener);&#10;            // return unsubscribe&#10;            return () =&gt; {&#10;                eventBus.off(id, listener);&#10;            };&#10;        }&#10;    };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/packages/39.ts/dom/h.test.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/packages/39.ts/dom/h.test.ts" />
              <option name="originalContent" value="import { describe, it, expect, vi, beforeEach } from 'vitest';&#10;import {createSignal} from &quot;../core/signal.js&quot;;&#10;import {DOMAdapter, h} from &quot;../dist/dom/h.js&quot;;&#10;&#10;// Simple test approach: Create a basic mock that works with the current h function&#10;// instead of trying to override the DOM adapter&#10;describe('h (DOM abstraction)', () =&gt; {&#10;  beforeEach(() =&gt; {&#10;    // Clear any previous mocks&#10;    vi.clearAllMocks();&#10;  });&#10;&#10;  it('should create basic element with tag', () =&gt; {&#10;    // In jsdom environment, document exists, so test the actual functionality&#10;    const element = h('div');&#10;    expect(element.tagName).toBe('DIV');&#10;  });&#10;&#10;  it('should validate tag parameter', () =&gt; {&#10;    // Test empty string - this should throw from createElement&#10;    expect(() =&gt; h('' as any)).toThrow();&#10;&#10;    // Test null specifically - let's debug this step by step&#10;    console.log('About to test h(null)...');&#10;    expect(() =&gt; {&#10;      console.log('Inside expect callback, about to call h(null)');&#10;      const result = h(null as any);&#10;      console.log('❌ h(null) unexpectedly succeeded, returned:', result);&#10;      return result;&#10;    }).toThrow();&#10;  });&#10;&#10;  it('should validate props parameter', () =&gt; {&#10;    expect(() =&gt; h('div', 'invalid' as any)).toThrow('Invalid props: expected object, got string');&#10;  });&#10;&#10;  // For now, let's focus on testing the parts that don't require DOM&#10;  // We can add more DOM-specific tests once we fix the adapter system&#10;});&#10;&#10;describe('DOM Adapter Types', () =&gt; {&#10;  it('should define the DOMAdapter interface correctly', () =&gt; {&#10;    // Test that our MockDOMAdapter implements the interface&#10;    class TestAdapter implements DOMAdapter {&#10;      createElement(tag: string): HTMLElement {&#10;        return {} as HTMLElement;&#10;      }&#10;      createTextNode(text: string): Text {&#10;        return {} as Text;&#10;      }&#10;    }&#10;&#10;    const adapter = new TestAdapter();&#10;    expect(typeof adapter.createElement).toBe('function');&#10;    expect(typeof adapter.createTextNode).toBe('function');&#10;  });&#10;});&#10;" />
              <option name="updatedContent" value="import { describe, it, expect, vi, beforeEach } from 'vitest';&#10;import {createSignal} from &quot;../core/signal.js&quot;;&#10;import {DOMAdapter, h} from &quot;../dist/dom/h.js&quot;;&#10;&#10;// Simple test approach: Create a basic mock that works with the current h function&#10;// instead of trying to override the DOM adapter&#10;describe('h (DOM abstraction)', () =&gt; {&#10;  beforeEach(() =&gt; {&#10;    // Clear any previous mocks&#10;    vi.clearAllMocks();&#10;  });&#10;&#10;  it('should create basic element with tag', () =&gt; {&#10;    // In jsdom environment, document exists, so test the actual functionality&#10;    const element = h('div');&#10;    expect(element.tagName).toBe('DIV');&#10;  });&#10;&#10;  it('should validate tag parameter', () =&gt; {&#10;    // Test empty string - this should throw from createElement&#10;    expect(() =&gt; h('' as any)).toThrow();&#10;&#10;    // Test null specifically - let's debug this step by step&#10;    console.log('About to test h(null)...');&#10;    expect(() =&gt; {&#10;      console.log('Inside expect callback, about to call h(null)');&#10;      const result = h(null as any);&#10;      console.log('❌ h(null) unexpectedly succeeded, returned:', result);&#10;      return result;&#10;    }).toThrow();&#10;  });&#10;&#10;  it('should validate props parameter', () =&gt; {&#10;    expect(() =&gt; h('div', 'invalid' as any)).toThrow('Invalid props: expected object or null, got string');&#10;  });&#10;&#10;  // For now, let's focus on testing the parts that don't require DOM&#10;  // We can add more DOM-specific tests once we fix the adapter system&#10;});&#10;&#10;describe('DOM Adapter Types', () =&gt; {&#10;  it('should define the DOMAdapter interface correctly', () =&gt; {&#10;    // Test that our MockDOMAdapter implements the interface&#10;    class TestAdapter implements DOMAdapter {&#10;      createElement(tag: string): HTMLElement {&#10;        return {} as HTMLElement;&#10;      }&#10;      createTextNode(text: string): Text {&#10;        return {} as Text;&#10;      }&#10;    }&#10;&#10;    const adapter = new TestAdapter();&#10;    expect(typeof adapter.createElement).toBe('function');&#10;    expect(typeof adapter.createTextNode).toBe('function');&#10;  });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/packages/39.ts/dom/h.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/packages/39.ts/dom/h.ts" />
              <option name="originalContent" value="import { eventBus } from '../core/eventBus';&#10;import { defaultClassNames } from './defaultClassNames';&#10;import { Signal } from &quot;../@types/state&quot;;&#10;&#10;export interface ElementProps {&#10;  className?: string;&#10;  style?: Partial&lt;CSSStyleDeclaration&gt; | Record&lt;string, string&gt;;&#10;  dispatch?: string;&#10;  util?: string[];&#10;  text?: string;&#10;  [key: string]: unknown;&#10;}&#10;&#10;export type Children = string | number | boolean | null | undefined | HTMLElement | Signal&lt;any&gt; | Children[];&#10;&#10;export type EventHandler&lt;E extends Event = Event&gt; = (event: E) =&gt; void;&#10;&#10;export interface DOMAdapter {&#10;  createElement(tag: string): HTMLElement;&#10;  createTextNode(text: string): Text;&#10;}&#10;&#10;export const webDOMAdapter: DOMAdapter = {&#10;  createElement: (tag: string) =&gt; {&#10;    if (typeof document === 'undefined' || !document.createElement) {&#10;      throw new Error('document is not defined. Provide a DOMAdapter for this environment.');&#10;    }&#10;    return document.createElement(tag);&#10;  },&#10;  createTextNode: (text: string) =&gt; {&#10;    if (typeof document === 'undefined' || !document.createTextNode) {&#10;      throw new Error('document is not defined. Provide a DOMAdapter for this environment.');&#10;    }&#10;    return document.createTextNode(text);&#10;  }&#10;};&#10;&#10;export const noopDOMAdapter: DOMAdapter = {&#10;  createElement: (tag: string) =&gt; {&#10;    throw new Error('No DOM available: tried to createElement(&quot;' + tag + '&quot;) in a non-DOM environment.');&#10;  },&#10;  createTextNode: (text: string) =&gt; {&#10;    throw new Error('No DOM available: tried to createTextNode in a non-DOM environment.');&#10;  }&#10;};&#10;&#10;let currentDOMAdapter: DOMAdapter = webDOMAdapter;&#10;&#10;export function setDOMAdapter(adapter: DOMAdapter): void {&#10;  currentDOMAdapter = adapter;&#10;}&#10;&#10;&#10;export function h(&#10;    tag: keyof HTMLElementTagNameMap,&#10;    props: ElementProps = {},&#10;    children: Children[] = []&#10;): HTMLElement {&#10;  if (!tag || typeof tag !== 'string') {&#10;    throw new Error(`Invalid tag: expected string, got ${typeof tag}`);&#10;  }&#10;  if (props !== null &amp;&amp; typeof props !== 'object') {&#10;    throw new Error(`Invalid props: expected object or null, got ${typeof props}`);&#10;  }&#10;&#10;  const element = currentDOMAdapter.createElement(tag);&#10;  applyProps(element, props, tag as string);&#10;  appendChildren(element, children);&#10;  return element;&#10;}&#10;&#10;function applyProps(element: HTMLElement, props: ElementProps, tag: string) {&#10;  const { dispatch, className, style, util, text, ...attrs } = props;&#10;&#10;  if (className) {&#10;    element.className = className;&#10;  } else if (tag in defaultClassNames) {&#10;    const def = (defaultClassNames as any)[tag];&#10;    if (def) element.className = def;&#10;  }&#10;&#10;  if (util &amp;&amp; Array.isArray(util)) {&#10;    element.className += (element.className ? ' ' : '') + util.join(' ');&#10;  }&#10;&#10;  if (style &amp;&amp; typeof style === 'object') {&#10;    Object.assign(element.style, style);&#10;  }&#10;&#10;  if (text !== undefined) {&#10;    element.textContent = String(text);&#10;  }&#10;&#10;  for (const [key, value] of Object.entries(attrs)) {&#10;    if (value === null || value === undefined || value === false) continue;&#10;    if (key.startsWith('on') &amp;&amp; typeof value === 'function') {&#10;      const eventName = key.slice(2).toLowerCase();&#10;      element.addEventListener(eventName, (evt) =&gt; {&#10;        (value as EventHandler)(evt);&#10;        if (dispatch) {&#10;          eventBus.emit(dispatch, evt);&#10;        }&#10;      });&#10;    } else {&#10;      element.setAttribute(key, String(value));&#10;    }&#10;  }&#10;}&#10;&#10;function appendChildren(element: HTMLElement, children: Children[]) {&#10;  for (const c of children) appendChild(element, c);&#10;}&#10;&#10;function appendChild(element: HTMLElement, child: Children) {&#10;  if (Array.isArray(child)) {&#10;    appendChildren(element, child);&#10;  } else if (child instanceof HTMLElement) {&#10;    element.appendChild(child);&#10;  } else if (isSignal(child)) {&#10;    const textNode = currentDOMAdapter.createTextNode(String(child.get()));&#10;    element.appendChild(textNode);&#10;    child.subscribe((v) =&gt; {&#10;      textNode.textContent = String(v);&#10;    });&#10;  } else if (child !== null &amp;&amp; child !== undefined &amp;&amp; child !== false) {&#10;    const textNode = currentDOMAdapter.createTextNode(String(child));&#10;    element.appendChild(textNode);&#10;  }&#10;}&#10;&#10;function isSignal(x: unknown): x is Signal&lt;unknown&gt; {&#10;  return typeof x === 'object' &amp;&amp; x !== null&#10;      &amp;&amp; typeof (x as any).get === 'function'&#10;      &amp;&amp; typeof (x as any).set === 'function'&#10;      &amp;&amp; typeof (x as any).subscribe === 'function';&#10;}&#10;&#10;/** @deprecated Use ElementProps instead */&#10;export type Props = ElementProps;&#10;" />
              <option name="updatedContent" value="import { eventBus } from '../core/eventBus.js';&#10;import { defaultClassNames } from './defaultClassNames.js';&#10;import { Signal } from &quot;../@types/state.js&quot;;&#10;&#10;export interface ElementProps {&#10;  className?: string;&#10;  style?: Partial&lt;CSSStyleDeclaration&gt; | Record&lt;string, string&gt;;&#10;  dispatch?: string;&#10;  util?: string[];&#10;  text?: string;&#10;  [key: string]: unknown;&#10;}&#10;&#10;export type Children = string | number | boolean | null | undefined | HTMLElement | Signal&lt;any&gt; | Children[];&#10;&#10;export type EventHandler&lt;E extends Event = Event&gt; = (event: E) =&gt; void;&#10;&#10;export interface DOMAdapter {&#10;  createElement(tag: string): HTMLElement;&#10;  createTextNode(text: string): Text;&#10;}&#10;&#10;export const webDOMAdapter: DOMAdapter = {&#10;  createElement: (tag: string) =&gt; {&#10;    if (typeof document === 'undefined' || !document.createElement) {&#10;      throw new Error('document is not defined. Provide a DOMAdapter for this environment.');&#10;    }&#10;    return document.createElement(tag);&#10;  },&#10;  createTextNode: (text: string) =&gt; {&#10;    if (typeof document === 'undefined' || !document.createTextNode) {&#10;      throw new Error('document is not defined. Provide a DOMAdapter for this environment.');&#10;    }&#10;    return document.createTextNode(text);&#10;  }&#10;};&#10;&#10;export const noopDOMAdapter: DOMAdapter = {&#10;  createElement: (tag: string) =&gt; {&#10;    throw new Error('No DOM available: tried to createElement(&quot;' + tag + '&quot;) in a non-DOM environment.');&#10;  },&#10;  createTextNode: (text: string) =&gt; {&#10;    throw new Error('No DOM available: tried to createTextNode in a non-DOM environment.');&#10;  }&#10;};&#10;&#10;let currentDOMAdapter: DOMAdapter = webDOMAdapter;&#10;&#10;export function setDOMAdapter(adapter: DOMAdapter): void {&#10;  currentDOMAdapter = adapter;&#10;}&#10;&#10;&#10;export function h(&#10;    tag: keyof HTMLElementTagNameMap,&#10;    props: ElementProps = {},&#10;    children: Children[] = []&#10;): HTMLElement {&#10;  if (!tag || typeof tag !== 'string') {&#10;    throw new Error(`Invalid tag: expected string, got ${typeof tag}`);&#10;  }&#10;  if (props !== null &amp;&amp; typeof props !== 'object') {&#10;    throw new Error(`Invalid props: expected object or null, got ${typeof props}`);&#10;  }&#10;&#10;  const element = currentDOMAdapter.createElement(tag);&#10;  applyProps(element, props, tag as string);&#10;  appendChildren(element, children);&#10;  return element;&#10;}&#10;&#10;function applyProps(element: HTMLElement, props: ElementProps, tag: string) {&#10;  const { dispatch, className, style, util, text, ...attrs } = props;&#10;&#10;  if (className) {&#10;    element.className = className;&#10;  } else if (tag in defaultClassNames) {&#10;    const def = (defaultClassNames as any)[tag];&#10;    if (def) element.className = def;&#10;  }&#10;&#10;  if (util &amp;&amp; Array.isArray(util)) {&#10;    element.className += (element.className ? ' ' : '') + util.join(' ');&#10;  }&#10;&#10;  if (style &amp;&amp; typeof style === 'object') {&#10;    Object.assign(element.style, style);&#10;  }&#10;&#10;  if (text !== undefined) {&#10;    element.textContent = String(text);&#10;  }&#10;&#10;  for (const [key, value] of Object.entries(attrs)) {&#10;    if (value === null || value === undefined || value === false) continue;&#10;    if (key.startsWith('on') &amp;&amp; typeof value === 'function') {&#10;      const eventName = key.slice(2).toLowerCase();&#10;      element.addEventListener(eventName, (evt) =&gt; {&#10;        (value as EventHandler)(evt);&#10;        if (dispatch) {&#10;          eventBus.emit(dispatch, evt);&#10;        }&#10;      });&#10;    } else {&#10;      element.setAttribute(key, String(value));&#10;    }&#10;  }&#10;}&#10;&#10;function appendChildren(element: HTMLElement, children: Children[]) {&#10;  for (const c of children) appendChild(element, c);&#10;}&#10;&#10;function appendChild(element: HTMLElement, child: Children) {&#10;  if (Array.isArray(child)) {&#10;    appendChildren(element, child);&#10;  } else if (child instanceof HTMLElement) {&#10;    element.appendChild(child);&#10;  } else if (isSignal(child)) {&#10;    const textNode = currentDOMAdapter.createTextNode(String(child.get()));&#10;    element.appendChild(textNode);&#10;    child.subscribe((v) =&gt; {&#10;      textNode.textContent = String(v);&#10;    });&#10;  } else if (child !== null &amp;&amp; child !== undefined &amp;&amp; child !== false) {&#10;    const textNode = currentDOMAdapter.createTextNode(String(child));&#10;    element.appendChild(textNode);&#10;  }&#10;}&#10;&#10;function isSignal(x: unknown): x is Signal&lt;unknown&gt; {&#10;  return typeof x === 'object' &amp;&amp; x !== null&#10;      &amp;&amp; typeof (x as any).get === 'function'&#10;      &amp;&amp; typeof (x as any).set === 'function'&#10;      &amp;&amp; typeof (x as any).subscribe === 'function';&#10;}&#10;&#10;/** @deprecated Use ElementProps instead */&#10;export type Props = ElementProps;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/packages/39.ts/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/packages/39.ts/index.ts" />
              <option name="originalContent" value="// Re-export core signal system&#10;export * from &quot;./core/createApp&quot;;&#10;export * from &quot;./core/createDerived&quot;;&#10;export * from &quot;./core/createEffect&quot;;&#10;export * from &quot;./core/createStoreSelector&quot;;&#10;export * from &quot;./core/devLogger&quot;;&#10;export * from &quot;./core/eventBus&quot;;&#10;export * from &quot;./core/router&quot;;&#10;export * from &quot;./core/signal&quot;;&#10;export * from &quot;./core/signalList&quot;;&#10;export * from &quot;./core/store&quot;;&#10;export * from &quot;./core/useLoadingOverlay&quot;;&#10;&#10;// Re-export DOM abstraction utilities&#10;export * from &quot;./dom/breadcrumbs&quot;;&#10;export * from &quot;./dom/className&quot;;&#10;export * from &quot;./dom/defaultClassNames&quot;;&#10;export * from &quot;./dom/h&quot;;&#10;export * from &quot;./dom/html&quot;;&#10;export * from &quot;./dom/loading&quot;;&#10;export * from &quot;./dom/renderer&quot;;&#10;&#10;// Re-export built-in components&#10;export * from &quot;./components/breadcrumbs&quot;;&#10;export * from &quot;./components/component&quot;;&#10;export * from &quot;./components/InputFields&quot;;&#10;export * from &quot;./components/link&quot;;&#10;export * from &quot;./components/loadingOverlay&quot;;&#10;export * from &quot;./components/modal&quot;;&#10;export * from &quot;./components/PasswordField&quot;;&#10;export * from &quot;./components/PhoneNumberField&quot;;&#10;export * from &quot;./components/RichSelectField&quot;;&#10;export * from &quot;./components/toast&quot;;&#10;export * from &quot;./components/useForm&quot;;&#10;export * from &quot;./components/layout/MainHeader&quot;;&#10;export * from &quot;./components/layout/Layout&quot;;&#10;export * from &quot;./components/layout/Sidebar&quot;;&#10;export * from &quot;./components/layout/MainFooter&quot;;&#10;&#10;// types&#10;export * from &quot;./@types/Bridge&quot;;&#10;export * from &quot;./@types/Config&quot;;&#10;export * from &quot;./@types/PlatformAdapter&quot;;&#10;export { createSignal, setSignalLogger, signalLogFn } from './core/signal';&#10;export { Signal } from './@types/state';&#10;// …rest of your re-exports…&#10;&#10;// storage&#10;export * from &quot;./storage/webStorage&quot;;&#10;export * from &quot;./storage/storageDriver&quot;;&#10;export * from &quot;./storage/NoopStorageDriver&quot;;&#10;" />
              <option name="updatedContent" value="// Re-export core signal system&#10;export * from &quot;./core/createApp.js&quot;;&#10;export * from &quot;./core/createDerived.js&quot;;&#10;export * from &quot;./core/createEffect.js&quot;;&#10;export * from &quot;./core/createStoreSelector.js&quot;;&#10;export * from &quot;./core/devLogger.js&quot;;&#10;export * from &quot;./core/eventBus.js&quot;;&#10;export * from &quot;./core/router.js&quot;;&#10;export * from &quot;./core/signal.js&quot;;&#10;export * from &quot;./core/signalList.js&quot;;&#10;export * from &quot;./core/store.js&quot;;&#10;export * from &quot;./core/useLoadingOverlay.js&quot;;&#10;&#10;// Re-export DOM abstraction utilities&#10;export * from &quot;./dom/breadcrumbs.js&quot;;&#10;export * from &quot;./dom/className.js&quot;;&#10;export * from &quot;./dom/defaultClassNames.js&quot;;&#10;export * from &quot;./dom/h.js&quot;;&#10;export * from &quot;./dom/html.js&quot;;&#10;export * from &quot;./dom/loading.js&quot;;&#10;export * from &quot;./dom/renderer.js&quot;;&#10;&#10;// Re-export built-in components&#10;export * from &quot;./components/breadcrumbs.js&quot;;&#10;export * from &quot;./components/component.js&quot;;&#10;export * from &quot;./components/InputFields.js&quot;;&#10;export * from &quot;./components/link.js&quot;;&#10;export * from &quot;./components/loadingOverlay.js&quot;;&#10;export * from &quot;./components/modal.js&quot;;&#10;export * from &quot;./components/PasswordField.js&quot;;&#10;export * from &quot;./components/PhoneNumberField.js&quot;;&#10;export * from &quot;./components/RichSelectField.js&quot;;&#10;export * from &quot;./components/toast.js&quot;;&#10;export * from &quot;./components/useForm.js&quot;;&#10;export * from &quot;./components/layout/MainHeader.js&quot;;&#10;export * from &quot;./components/layout/Layout.js&quot;;&#10;export * from &quot;./components/layout/Sidebar.js&quot;;&#10;export * from &quot;./components/layout/MainFooter.js&quot;;&#10;&#10;// types&#10;export * from &quot;./@types/Bridge.js&quot;;&#10;export * from &quot;./@types/Config.js&quot;;&#10;export * from &quot;./@types/PlatformAdapter.js&quot;;&#10;export { createSignal, setSignalLogger, signalLogFn } from './core/signal.js';&#10;export { Signal } from './@types/state.js';&#10;// …rest of your re-exports…&#10;&#10;// storage&#10;export * from &quot;./storage/webStorage.js&quot;;&#10;export * from &quot;./storage/storageDriver.js&quot;;&#10;export * from &quot;./storage/NoopStorageDriver.js&quot;;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/packages/39.ts/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/packages/39.ts/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;39.ts&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;description&quot;: &quot;A lightweight TypeScript-native UI framework with signal-based state and DOM primitives.&quot;,&#10;  &quot;main&quot;: &quot;dist/index.js&quot;,&#10;  &quot;types&quot;: &quot;dist/index.d.ts&quot;,&#10;  &quot;exports&quot;: {&#10;    &quot;.&quot;: {&#10;      &quot;import&quot;: &quot;./dist/index.js&quot;,&#10;      &quot;types&quot;: &quot;./dist/index.d.ts&quot;&#10;    },&#10;    &quot;./styles&quot;: &quot;./dist/styles/index.css&quot;,&#10;    &quot;./styles/base&quot;: &quot;./dist/styles/base.css&quot;,&#10;    &quot;./styles/layout&quot;: &quot;./dist/styles/layout.css&quot;,&#10;    &quot;./styles/form&quot;: &quot;./dist/styles/form.css&quot;,&#10;    &quot;./styles/utility&quot;: &quot;./dist/styles/utility.css&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;build&quot;: &quot;tsc --project tsconfig.json &amp;&amp; cp -r styles dist/styles&quot;,&#10;    &quot;clean&quot;: &quot;rm -rf dist &amp;&amp; mkdir dist&quot;,&#10;    &quot;prepare&quot;: &quot;npm run clean &amp;&amp; npm run build&quot;,&#10;    &quot;test&quot;: &quot;vitest&quot;,&#10;    &quot;test:run&quot;: &quot;vitest run&quot;,&#10;    &quot;typecheck&quot;: &quot;tsc --noEmit&quot;&#10;  },&#10;  &quot;keywords&quot;: [&#10;    &quot;typescript&quot;,&#10;    &quot;ui-framework&quot;,&#10;    &quot;dom&quot;,&#10;    &quot;signals&quot;,&#10;    &quot;reactivity&quot;,&#10;    &quot;minimal&quot;&#10;  ],&#10;  &quot;author&quot;: &quot;Giona Granchelli&quot;,&#10;  &quot;license&quot;: &quot;MIT&quot;,&#10;  &quot;files&quot;: [&#10;    &quot;dist&quot;,&#10;    &quot;core&quot;,&#10;    &quot;components&quot;,&#10;    &quot;html&quot;,&#10;    &quot;index.ts&quot;&#10;  ],&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@vitest/coverage-v8&quot;: &quot;^3.2.4&quot;,&#10;    &quot;@vitest/ui&quot;: &quot;^3.2.4&quot;,&#10;    &quot;typescript&quot;: &quot;^5.3.0&quot;,&#10;    &quot;vitest&quot;: &quot;^3.2.4&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;39.ts&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;description&quot;: &quot;A lightweight TypeScript-native UI framework with signal-based state and DOM primitives.&quot;,&#10;  &quot;main&quot;: &quot;dist/index.js&quot;,&#10;  &quot;types&quot;: &quot;dist/index.d.ts&quot;,&#10;  &quot;exports&quot;: {&#10;    &quot;.&quot;: {&#10;      &quot;import&quot;: &quot;./dist/index.js&quot;,&#10;      &quot;types&quot;: &quot;./dist/index.d.ts&quot;&#10;    },&#10;    &quot;./core/store&quot;: {&#10;      &quot;import&quot;: &quot;./dist/core/store.js&quot;,&#10;      &quot;types&quot;: &quot;./dist/core/store.d.ts&quot;&#10;    },&#10;    &quot;./core/signal&quot;: {&#10;      &quot;import&quot;: &quot;./dist/core/signal.js&quot;,&#10;      &quot;types&quot;: &quot;./dist/core/signal.d.ts&quot;&#10;    },&#10;    &quot;./core/createEffect&quot;: {&#10;      &quot;import&quot;: &quot;./dist/core/createEffect.js&quot;,&#10;      &quot;types&quot;: &quot;./dist/core/createEffect.d.ts&quot;&#10;    },&#10;    &quot;./core/createDerived&quot;: {&#10;      &quot;import&quot;: &quot;./dist/core/createDerived.js&quot;,&#10;      &quot;types&quot;: &quot;./dist/core/createDerived.d.ts&quot;&#10;    },&#10;    &quot;./core/eventBus&quot;: {&#10;      &quot;import&quot;: &quot;./dist/core/eventBus.js&quot;,&#10;      &quot;types&quot;: &quot;./dist/core/eventBus.d.ts&quot;&#10;    },&#10;    &quot;./core/router&quot;: {&#10;      &quot;import&quot;: &quot;./dist/core/router.js&quot;,&#10;      &quot;types&quot;: &quot;./dist/core/router.d.ts&quot;&#10;    },&#10;    &quot;./dom/h&quot;: {&#10;      &quot;import&quot;: &quot;./dist/dom/h.js&quot;,&#10;      &quot;types&quot;: &quot;./dist/dom/h.d.ts&quot;&#10;    },&#10;    &quot;./dom/renderer&quot;: {&#10;      &quot;import&quot;: &quot;./dist/dom/renderer.js&quot;,&#10;      &quot;types&quot;: &quot;./dist/dom/renderer.d.ts&quot;&#10;    },&#10;    &quot;./components/toast&quot;: {&#10;      &quot;import&quot;: &quot;./dist/components/toast.js&quot;,&#10;      &quot;types&quot;: &quot;./dist/components/toast.d.ts&quot;&#10;    },&#10;    &quot;./styles&quot;: &quot;./dist/styles/index.css&quot;,&#10;    &quot;./styles/base&quot;: &quot;./dist/styles/base.css&quot;,&#10;    &quot;./styles/layout&quot;: &quot;./dist/styles/layout.css&quot;,&#10;    &quot;./styles/form&quot;: &quot;./dist/styles/form.css&quot;,&#10;    &quot;./styles/utility&quot;: &quot;./dist/styles/utility.css&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;build&quot;: &quot;tsc --project tsconfig.json &amp;&amp; cp -r styles dist/styles&quot;,&#10;    &quot;clean&quot;: &quot;rm -rf dist &amp;&amp; mkdir dist&quot;,&#10;    &quot;prepare&quot;: &quot;npm run clean &amp;&amp; npm run build&quot;,&#10;    &quot;test&quot;: &quot;vitest&quot;,&#10;    &quot;test:run&quot;: &quot;vitest run&quot;,&#10;    &quot;typecheck&quot;: &quot;tsc --noEmit&quot;&#10;  },&#10;  &quot;keywords&quot;: [&#10;    &quot;typescript&quot;,&#10;    &quot;ui-framework&quot;,&#10;    &quot;dom&quot;,&#10;    &quot;signals&quot;,&#10;    &quot;reactivity&quot;,&#10;    &quot;minimal&quot;&#10;  ],&#10;  &quot;author&quot;: &quot;Giona Granchelli&quot;,&#10;  &quot;license&quot;: &quot;MIT&quot;,&#10;  &quot;files&quot;: [&#10;    &quot;dist&quot;,&#10;    &quot;core&quot;,&#10;    &quot;components&quot;,&#10;    &quot;html&quot;,&#10;    &quot;index.ts&quot;&#10;  ],&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@vitest/coverage-v8&quot;: &quot;^3.2.4&quot;,&#10;    &quot;@vitest/ui&quot;: &quot;^3.2.4&quot;,&#10;    &quot;typescript&quot;: &quot;^5.3.0&quot;,&#10;    &quot;vitest&quot;: &quot;^3.2.4&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/packages/39.ts/tsconfig.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/packages/39.ts/tsconfig.json" />
              <option name="originalContent" value="{&#10;  &quot;extends&quot;: &quot;../../tsconfig.base.json&quot;,&#10;  &quot;compilerOptions&quot;: {&#10;    &quot;target&quot;: &quot;ES2022&quot;,&#10;    &quot;module&quot;: &quot;ESNext&quot;,&#10;    &quot;moduleResolution&quot;: &quot;bundler&quot;,&#10;    &quot;allowImportingTsExtensions&quot;: false,&#10;    &quot;noEmit&quot;: false,&#10;    &quot;declaration&quot;: true,&#10;    &quot;declarationMap&quot;: true,&#10;    &quot;outDir&quot;: &quot;dist&quot;,&#10;    &quot;rootDir&quot;: &quot;.&quot;,          // so index.ts → dist/index.js&#10;    &quot;strict&quot;: true,&#10;    &quot;composite&quot;: true,&#10;    &quot;verbatimModuleSyntax&quot;: true&#10;  },&#10;  &quot;include&quot;: [&#10;    &quot;index.ts&quot;,&#10;    &quot;core/**/*&quot;,&#10;    &quot;dom/**/*&quot;,&#10;    &quot;components/**/*&quot;,&#10;    &quot;storage/**/*&quot;,&#10;    &quot;@types/**/*&quot;&#10;  ],&#10;  &quot;exclude&quot;: [&#10;    &quot;dist&quot;,&#10;    &quot;node_modules&quot;,&#10;    &quot;../39.starter/**&quot;&#10;  ]&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;extends&quot;: &quot;../../tsconfig.base.json&quot;,&#10;  &quot;compilerOptions&quot;: {&#10;    &quot;target&quot;: &quot;ES2022&quot;,&#10;    &quot;module&quot;: &quot;ESNext&quot;,&#10;    &quot;moduleResolution&quot;: &quot;Node&quot;,&#10;    &quot;declaration&quot;: true,&#10;    &quot;declarationMap&quot;: true,&#10;    &quot;outDir&quot;: &quot;dist&quot;,&#10;    &quot;rootDir&quot;: &quot;.&quot;,          // so index.ts → dist/index.js&#10;    &quot;strict&quot;: true,&#10;    &quot;composite&quot;: true,&#10;    &quot;allowImportingTsExtensions&quot;: false,&#10;    &quot;noEmit&quot;: false&#10;  },&#10;  &quot;include&quot;: [&#10;    &quot;index.ts&quot;,&#10;    &quot;core/**/*&quot;,&#10;    &quot;dom/**/*&quot;,&#10;    &quot;components/**/*&quot;,&#10;    &quot;storage/**/*&quot;,&#10;    &quot;@types/**/*&quot;&#10;  ],&#10;  &quot;exclude&quot;: [&#10;    &quot;dist&quot;,&#10;    &quot;node_modules&quot;,&#10;    &quot;../39.starter/**&quot;&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/packages/39.ts/vitest.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/packages/39.ts/vitest.config.ts" />
              <option name="originalContent" value="import { defineConfig } from 'vitest/config';&#10;import * as path from 'path';&#10;import { resolve } from 'path';&#10;0&#10;export default defineConfig({&#10;  root: path.resolve(__dirname),&#10;  test: {&#10;    include: [&#10;      'core/**/*.test.{ts,js}',&#10;      'dom/**/*.test.{ts,js}',&#10;      'components/**/*.test.{ts,js}',&#10;      'storage/**/*.test.{ts,js}',&#10;    ],&#10;    exclude: ['dist', 'node_modules'],&#10;    globals: true,&#10;    environment: 'jsdom', // or 'jsdom'&#10;    watch: false,&#10;    coverage: {&#10;      provider: 'v8',&#10;      reporter: ['text', 'json', 'html'],&#10;    },&#10;  },&#10;  resolve: {&#10;    alias: {&#10;      '39.ts': resolve(__dirname, './index.ts'),&#10;    }&#10;  }&#10;});" />
              <option name="updatedContent" value="import { defineConfig } from 'vitest/config';&#10;import * as path from 'path';&#10;import { resolve } from 'path';&#10;&#10;export default defineConfig({&#10;  root: path.resolve(__dirname),&#10;  test: {&#10;    include: [&#10;      'core/**/*.test.{ts,js}',&#10;      'dom/**/*.test.{ts,js}',&#10;      'components/**/*.test.{ts,js}',&#10;      'storage/**/*.test.{ts,js}',&#10;    ],&#10;    exclude: ['dist', 'node_modules'],&#10;    globals: true,&#10;    environment: 'jsdom',&#10;    watch: false,&#10;    coverage: {&#10;      provider: 'v8',&#10;      reporter: ['text', 'json', 'html'],&#10;    },&#10;  },&#10;  resolve: {&#10;    alias: {&#10;      // Use the compiled output with proper ESM resolution&#10;      '39.ts': resolve(__dirname, './dist/index.js'),&#10;    }&#10;  },&#10;  esbuild: {&#10;    // Ensure proper ESM handling&#10;    target: 'es2022',&#10;    format: 'esm'&#10;  }&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>